image:
  name: docker/compose:1.29.2
  entrypoint: [ "" ]

services:
  - docker:dind

stages:
  - build
  - deploy
  - test

variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2

#before_script:
#  - export IMAGE=$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME
#  - export BACKEND_IMAGE=$IMAGE:backend
#  - export NGINX_IMAGE=$IMAGE:nginx
#  - apk add --no-cache openssh-client bash
#  - echo $SQL_HOST
#  - chmod +x ./setup_env.sh
#  - bash ./setup_env.sh
#  - ls -a
#  - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY

build:
  stage: build
  before_script:
    - export IMAGE=$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME
    - export BACKEND_IMAGE=$IMAGE:backend
    - export NGINX_IMAGE=$IMAGE:nginx
    - apk add --no-cache openssh-client bash
    - echo $SQL_HOST
    - chmod +x ./setup_env.sh
    - bash ./setup_env.sh
    - ls -a
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - docker pull $IMAGE:backend || true
    - docker pull $IMAGE:nginx || true
    - docker-compose -f docker-compose.ci.yml build
    - docker push $IMAGE:backend
    - docker push $IMAGE:nginx
  only:
    - main

deploy:
  stage: deploy
  before_script:
    - export IMAGE=$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME
    - export BACKEND_IMAGE=$IMAGE:backend
    - export NGINX_IMAGE=$IMAGE:nginx
    - apk add --no-cache openssh-client bash
    - echo $SQL_HOST
    - chmod +x ./setup_env.sh
    - bash ./setup_env.sh
    - ls -a
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - mkdir -p ~/.ssh
    - echo "$PRIVATE_KEY" | tr -d '\r' > ./id_rsa
    - cat ./id_rsa
    - chmod 700 ./id_rsa
    - eval "$(ssh-agent -s)"
    - ssh-add ./id_rsa
    - ssh-keyscan -H 'gitlab.com' >> ~/.ssh/known_hosts
    - chmod +x ./deploy.sh
    - scp  -o StrictHostKeyChecking=no -r ./.env ./docker-compose.prod.yml ec2-user@$EC2_PUBLIC_IP_ADDRESS:/home/ec2-user/Backend
    - bash ./deploy.sh
  only:
    - main

test:
  stage: test
  script:
    - docker-compose up -d
    - docker exec ambient_frontend npx playwright install --with-deps
    - docker exec ambient_frontend npx playwright test
  only:
    - develop
    - main
  artifacts:
    when: always
    paths:
        - Frontend/playwright-report/
        - Frontend/results.xml
    reports:
        junit: Frontend/results.xml